---
- hosts: all
  become: yes
  remote_user: automation
  ignore_errors: yes
  tasks:
    - name: collect the process model info
      lineinfile:
        line: "cpu model= {{ ansible_product_name }}"
        regexp: '^cpu model='
        path: /etc/inv.file
        create: yes


    - name: collect the hosts swap size
      lineinfile:
        line: "swap size= {{ ansible_swaptotal_mb }}"
        regexp: '^swap size='
        path: /etc/inv.file
        create: yes


    - name: collect the hosts disk sda
      lineinfile:
        line: "xvda size= {{ ansible_devices.xvda.partitions.size }}"
        regexp: '^xvda size='
        path: /etc/inv.file
        create: yes
      register: xvda_output

    - name: enter absent as a value if not find
      lineinfile:
        line: 'xvda size= absent'
        regexp: 'xvda size='
        path: /etc/inv.file
        create: yes
      when: xvda_output is failed


    - name: collect the hosts disk sdb
      lineinfile:
        line: "cpu model= {{ ansible_devices.xvdb.partitions.size }}"
        regexp: '^xvdb size='
        path: /etc/inv.file
        create: yes
      register: xvdb_output


    - name: enter absent as a value if not find
      lineinfile:
        line: 'xvdb size= absent'
        regexp: 'xvdb size='
        path: /etc/inv.file
        create: yes
      when: xvdb_output is failed


---
- name: Patch Rocky Linux systems, generate patching report, and reboot if necessary
  hosts: all
  gather_facts: true
  become: yes
  tasks:

    - name: Upgrade all packages
      package:
        name: "*"
        state: latest
      register: patching_report

    - name: Generate patching report
      copy:
        content: |
          Hostname: {{ inventory_hostname }}
          Date: {{ ansible_date_time.date }}
          Time: {{ ansible_date_time.time }}
          Patching Report:
          {{ patching_report | to_nice_json }}
        dest: "/tmp/patching_report_{{ inventory_hostname }}.txt"
      delegate_to: localhost

    - name: Check if reboot is required
      shell: needs-restarting -r
      register: reboot_required
      changed_when: false
      ignore_errors: true

    - name: Reboot server if required and no user is logged in
      command: shutdown -r now "Reboot triggered by Ansible"
      async: 0
      poll: 0
      when: reboot_required.stdout | default("") != "" and ansible_nodename not in ansible_play_hosts_all and ansible_user_id == 'root'
      ignore_errors: true
      register: reboot_result
      become: true

    - name: Wait for server to come back online
      wait_for_connection:
        delay: 30
        timeout: 300
      when: reboot_result is succeeded

    - name: Retrieve patching report
      fetch:
        src: "/tmp/patching_report_{{ inventory_hostname }}.txt"
        dest: "/home/ansible_user/patch-report.txt/"
        flat: yes
      delegate_to: localhost
